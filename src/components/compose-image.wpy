<template>
  <!-- 合图组件 -->
  <view style="margin-top: -40px">
    <slot name="composeSlot" wx:if="{{showSlot}}"></slot>

    <canvas canvas-id="composeCanvas" binderror="canvasIdErrorCallback" wx:if="{{!hiddenCanvas}}"
      style="width: {{canvasWidth}}px;height: {{canvasHeight}}px;margin-left: 200%;"></canvas>

    <image src="{{imgPath}}" mode="widthFix" wx:if="{{imgPath}}"
      binderror="" bindload="" bindtap="previewImage"
      style="width: {{width}}px;height: {{height}}px;"></image>
  </view>
</template>

<script>
import wepy from 'wepy'
import { drawingMiniQr } from '../utils'

let w = wepy.getSystemInfoSync().windowWidth
let h = wepy.getSystemInfoSync().windowHeight

export default class composeImage extends wepy.component {
  props = {}
  data = {
    qrImgPath: null,
    imgPath: null,
    hiddenCanvas: false,
    showSlot: false,
    width: w * 0.76,
    height: h * 0.86,
    canvasWidth: w,
    canvasHeight: h
  }
  methods = {
    canvasIdErrorCallback: function (e) {
      console.error(144, e.detail.errMsg)
    },
    previewImage() {
      wepy.previewImage({
        // 需要预览的图片http链接  使用split把字符串转数组。不然会报错
        urls: this.imgPath.split(','),
        success: (res) => {
          console.log('预览成功', res)
        },
        fail: (res) => {
          console.log('预览失败', res)
        },
        complete: (res) => {
          console.log('预览完成', res)
        }
      })
    }
  }
  onLoad() {
    console.log('加载合图组件', this.data)
  }
  async drawFn(img, text, qr) {
    // 调用公共方法去绘制
    let vm = this
    const ctx = wepy.createCanvasContext('composeCanvas', vm)
    wepy.showLoading({title: '绘制中', mask: true})
    // let data = await drawingMiniQr(link, param, img, text, ctx)
    // console.log(2018, data)
    await drawingMiniQr(img, text, qr, ctx).then((res) => {
      // 把当前画布指定区域的内容导出生成指定大小的图片，并返回文件路径(此路径指在小程序环境下生效)
      setTimeout(() => {
        wepy.canvasToTempFilePath({
          // x: 0,
          // y: 0,
          // width: 500,
          // height: 500,
          // destWidth: 100,
          // destHeight: 100,
          canvasId: 'composeCanvas'
        }, vm).then((res) => {
          console.log(2019, res)
          vm.imgPath = res.tempFilePath
          vm.hiddenCanvas = true
          vm.showSlot = true
          vm.$apply()
          wepy.hideLoading()
        }).catch((e) => {
          wepy.hideLoading()
          console.log('合成小程序码导出图片异常', e)
        })
      }, 500)
    }).catch((e) => {
      wepy.hideLoading()
      console.log('合成小程序码图片出错', e)
    })
  }
}
</script>

<style lang="less">
.goods-main {
  width: 100%;
  background-color: #fff;
  box-sizing: border-box;
}

.goods-img {
  display: flex;
}

.goods-img image {
  width: 100%;
}

.shop-price {
  padding: 4rpx 24rpx 8rpx;
  font-size: 26rpx;
  padding-right: 10px;
  color: #ef0021;
}

.market-price {
  color: #999;
  text-decoration: line-through;
  font-size: 22rpx;
}

.goods-title {
  font-size: 23rpx;
  color: #999;
  padding: 0 24rpx;
  overflow: hidden;
}

.goods-brief {
  font-size: 25rpx;
  color: #333;
  overflow: hidden;
  box-sizing: border-box;
  height: 36rpx;
  padding: 0 24rpx;
}

.ellipsis {
  text-overflow:ellipsis;
  overflow:hidden;
  white-space:nowrap;
}
</style>
